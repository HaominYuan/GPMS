[{"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\index.js":"1","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\edit\\Edit.js":"2","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\store\\RootStore.js":"3","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\order\\Order.js":"4","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\display\\Search.js":"5","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\OrderList.js":"6","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\api\\axios-config.js":"7","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\display\\Display.js":"8","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\display\\Cart.js":"9","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\404\\Nomatch.js":"10","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\display\\Goods.js":"11","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\Seller.js":"12","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\features\\auth\\AuthContext.js":"13","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\features\\type\\TypeContext.js":"14","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\FlowerList.js":"15","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\features\\display\\DisplayContext.js":"16","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\features\\flower\\FlowerContext.js":"17","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\login\\Login.js":"18","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\pay\\Pay.js":"19","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\TypeList.js":"20","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\home\\Home.js":"21","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\FlowerUpload.js":"22","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\404\\NoMatch.js":"23"},{"size":1702,"mtime":1614344139021,"results":"24","hashOfConfig":"25"},{"size":6035,"mtime":1614057627860,"results":"26","hashOfConfig":"25"},{"size":976,"mtime":1614344217578,"results":"27","hashOfConfig":"25"},{"size":5089,"mtime":1614256979849,"results":"28","hashOfConfig":"25"},{"size":583,"mtime":1614255295978,"results":"29","hashOfConfig":"25"},{"size":757,"mtime":1614250211293,"results":"30","hashOfConfig":"25"},{"size":750,"mtime":1614057627847,"results":"31","hashOfConfig":"25"},{"size":641,"mtime":1614057627857,"results":"32","hashOfConfig":"25"},{"size":2819,"mtime":1614261451664,"results":"33","hashOfConfig":"25"},{"size":276,"mtime":1614343555763,"results":"34","hashOfConfig":"25"},{"size":1366,"mtime":1614255394370,"results":"35","hashOfConfig":"25"},{"size":2817,"mtime":1614254385629,"results":"36","hashOfConfig":"25"},{"size":1036,"mtime":1614438240152,"results":"37","hashOfConfig":"25"},{"size":1670,"mtime":1614331662222,"results":"38","hashOfConfig":"25"},{"size":6590,"mtime":1614261211452,"results":"39","hashOfConfig":"25"},{"size":2648,"mtime":1614259139877,"results":"40","hashOfConfig":"25"},{"size":1900,"mtime":1614261235904,"results":"41","hashOfConfig":"25"},{"size":2424,"mtime":1614057627862,"results":"42","hashOfConfig":"25"},{"size":7507,"mtime":1614257980589,"results":"43","hashOfConfig":"25"},{"size":4106,"mtime":1614411292911,"results":"44","hashOfConfig":"25"},{"size":3619,"mtime":1614259124068,"results":"45","hashOfConfig":"25"},{"size":2056,"mtime":1614260646712,"results":"46","hashOfConfig":"25"},{"size":276,"mtime":1614343555763,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"7pf7oj",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\index.js",[],["106","107"],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\edit\\Edit.js",["108"],"import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\r\nimport style from './edit.module.scss'\r\n\r\nconst EditableContext = React.createContext();\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    ...restProps\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef = useRef();\r\n    const form = useContext(EditableContext);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async (e) => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0,\r\n                }}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: `${title} is required.`,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n            </Form.Item>\r\n        ) : (\r\n                <div\r\n                    className=\"editable-cell-value-wrap\"\r\n                    style={{\r\n                        paddingRight: 24,\r\n                    }}\r\n                    onClick={toggleEdit}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n    }\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nclass EditableTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.columns = [\r\n            {\r\n                title: 'name',\r\n                dataIndex: 'name',\r\n                width: '30%',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'age',\r\n                dataIndex: 'age',\r\n            },\r\n            {\r\n                title: 'address',\r\n                dataIndex: 'address',\r\n            },\r\n            {\r\n                title: 'operation',\r\n                dataIndex: 'operation',\r\n                render: (text, record) =>\r\n                    this.state.dataSource.length >= 1 ? (\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\r\n                            <a>Delete</a>\r\n                        </Popconfirm>\r\n                    ) : null,\r\n            },\r\n        ];\r\n        this.state = {\r\n            dataSource: [\r\n                {\r\n                    key: '0',\r\n                    name: 'Edward King 0',\r\n                    age: '32',\r\n                    address: 'London, Park Lane no. 0',\r\n                },\r\n                {\r\n                    key: '1',\r\n                    name: 'Edward King 1',\r\n                    age: '32',\r\n                    address: 'London, Park Lane no. 1',\r\n                },\r\n            ],\r\n            count: 2,\r\n        };\r\n    }\r\n\r\n    handleDelete = (key) => {\r\n        const dataSource = [...this.state.dataSource];\r\n        this.setState({\r\n            dataSource: dataSource.filter((item) => item.key !== key),\r\n        });\r\n    };\r\n    handleAdd = () => {\r\n        const { count, dataSource } = this.state;\r\n        const newData = {\r\n            key: count,\r\n            name: `Edward King ${count}`,\r\n            age: 32,\r\n            address: `London, Park Lane no. ${count}`,\r\n        };\r\n        this.setState({\r\n            dataSource: [...dataSource, newData],\r\n            count: count + 1,\r\n        });\r\n    };\r\n    handleSave = (row) => {\r\n        const newData = [...this.state.dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        this.setState({\r\n            dataSource: newData,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { dataSource } = this.state;\r\n        const components = {\r\n            body: {\r\n                row: EditableRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n        const columns = this.columns.map((col) => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n\r\n            return {\r\n                ...col,\r\n                onCell: (record) => ({\r\n                    record,\r\n                    editable: col.editable,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    handleSave: this.handleSave,\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n        return (\r\n            <div className={style.edit}>\r\n                <Button\r\n                    onClick={this.handleAdd}\r\n                    type=\"primary\"\r\n                    style={{\r\n                        marginBottom: 16,\r\n                    }}\r\n                >\r\n                    Add a row\r\n                </Button>\r\n                <Table\r\n                    components={components}\r\n                    rowClassName={() => 'editable-row'}\r\n                    bordered\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditableTable",["109","110"],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\store\\RootStore.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\order\\Order.js",["111","112"],"import React, { useContext } from 'react'\r\nimport { Badge, Button, Card, Divider, Image, List, Space } from 'antd'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootStoreContext } from '../../store/RootStore';\r\nimport style from './order.module.scss'\r\nimport Text from 'antd/lib/typography/Text';\r\n\r\n\r\n// const data = [{\r\n//     \"information\":\r\n//     {\r\n//         \"receiver\": \"tstxxy\", \"phone\": \"15338755459\", \"address\": {\r\n//             \"region\": [\"广东省\", \"广州市\", \"天河区\"],\r\n//             \"address\": \"天河体育中心\"\r\n//         }, \"expressCompany\": \"顺丰\", \"remark\": \"孟觉觉\"\r\n//     },\r\n//     \"list\": [\r\n//         { \"price\": 158, \"title\": \"11枝红玫瑰+栀子叶\", \"img\": \"/static/media/0.6d5e7135.jpg\", \"id\": 0, \"number\": 3 },\r\n//         { \"price\": 268, \"title\": \"19枝苏醒玫瑰+2枝粉色桔梗\", \"img\": \"/static/media/1.bdbb4833.jpg\", \"id\": 1, \"number\": 2 },\r\n//         { \"price\": 628, \"title\": \"戴安娜粉玫瑰+紫色勿忘我\", \"img\": \"/static/media/3.0900c046.jpg\", \"id\": 3, \"number\": 2 },\r\n//         { \"price\": 378, \"title\": \"浓33枝红玫瑰+梦幻黑纱\", \"img\": \"/static/media/2.e88520e9.jpg\", \"id\": 2, \"number\": 1 }],\r\n//     \"isReceived\": false,\r\n//     \"isSent\": false,\r\n//     \"money\": 345\r\n// },\r\n// {\r\n//     \"information\":\r\n//     {\r\n//         \"receiver\": \"tstxxy\", \"phone\": \"15338755459\", \"address\": {\r\n//             \"region\": [\"广东省\", \"广州市\", \"天河区\"],\r\n//             \"address\": \"天河体育中心\"\r\n//         }, \"expressCompany\": \"顺丰\", \"remark\": \"孟觉觉\"\r\n//     },\r\n//     \"list\": [\r\n//         { \"price\": 158, \"title\": \"11枝红玫瑰+栀子叶\", \"img\": \"/static/media/0.6d5e7135.jpg\", \"id\": 0, \"number\": 3 },\r\n//         { \"price\": 268, \"title\": \"19枝苏醒玫瑰+2枝粉色桔梗\", \"img\": \"/static/media/1.bdbb4833.jpg\", \"id\": 1, \"number\": 2 },\r\n//         { \"price\": 628, \"title\": \"戴安娜粉玫瑰+紫色勿忘我\", \"img\": \"/static/media/3.0900c046.jpg\", \"id\": 3, \"number\": 2 },\r\n//         { \"price\": 378, \"title\": \"浓33枝红玫瑰+梦幻黑纱\", \"img\": \"/static/media/2.e88520e9.jpg\", \"id\": 2, \"number\": 1 }],\r\n//     \"isReceived\": false,\r\n//     \"isSent\": true,\r\n//     money: 123\r\n// },\r\n// {\r\n//     \"information\":\r\n//     {\r\n//         \"receiver\": \"tstxxy\", \"phone\": \"15338755459\", \"address\": {\r\n//             \"region\": [\"广东省\", \"广州市\", \"天河区\"],\r\n//             \"address\": \"天河体育中心\"\r\n//         }, \"expressCompany\": \"顺丰\", \"remark\": \"孟觉觉\"\r\n//     },\r\n//     \"list\": [\r\n//         { \"price\": 158, \"title\": \"11枝红玫瑰+栀子叶\", \"img\": \"/static/media/0.6d5e7135.jpg\", \"id\": 0, \"number\": 3 },\r\n//         { \"price\": 268, \"title\": \"19枝苏醒玫瑰+2枝粉色桔梗\", \"img\": \"/static/media/1.bdbb4833.jpg\", \"id\": 1, \"number\": 2 },\r\n//         { \"price\": 628, \"title\": \"戴安娜粉玫瑰+紫色勿忘我\", \"img\": \"/static/media/3.0900c046.jpg\", \"id\": 3, \"number\": 2 },\r\n//         { \"price\": 378, \"title\": \"浓33枝红玫瑰+梦幻黑纱\", \"img\": \"/static/media/2.e88520e9.jpg\", \"id\": 2, \"number\": 1 }],\r\n//     \"isReceived\": true,\r\n//     \"isSent\": true,\r\n//     money: 123\r\n// }]\r\n\r\nconst Order = observer(() => {\r\n    const { displayStore } = useContext(RootStoreContext)\r\n\r\n    return (\r\n        <>\r\n            <List\r\n                header={<div>所有订单</div>}\r\n                bordered\r\n                dataSource={displayStore.orderList}\r\n\r\n                renderItem={({ list, isReceived, isSent, money }) => (\r\n                    <Card>\r\n                        <div className={style.item}>\r\n                            {list.map(({ price, title, imgUrl, key, number }) => {\r\n                                console.log(imgUrl)\r\n                                return (\r\n                                    <div className={style.cartGoods} key={key}>\r\n                                        <Badge count={number}>\r\n                                            <Image src={imgUrl} width={100} />\r\n                                        </Badge>\r\n                                        <div className={style.left}>\r\n                                            <h5 className={style.title}>{title}</h5>\r\n                                            <div className={style.meta}>\r\n                                                <h5>{price}元</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        <div className={style.down}>\r\n                            <Text type='danger'>总金额:  {money}</Text>\r\n                            <div>\r\n                                {!isSent ? <Button disabled>尚未发货</Button> : isReceived ? <Button disabled>已经收货</Button> : <Button type='primary'>确认收货</Button>}\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Order",["113","114"],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\display\\Search.js",[],["115","116"],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\OrderList.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\api\\axios-config.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\display\\Display.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\display\\Cart.js",["117"],"import React, { useContext } from 'react'\r\nimport { Badge, Button, Drawer, Image, } from 'antd'\r\nimport { RootStoreContext } from '../../store/RootStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport style from './display.module.scss'\r\nimport ButtonGroup from 'antd/lib/button/button-group';\r\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst Cart = observer(() => {\r\n    const { displayStore } = useContext(RootStoreContext)\r\n    const history = useHistory()\r\n\r\n    const onClose = () => {\r\n        displayStore.setCartVisible(false)\r\n    }\r\n\r\n    const open = () => {\r\n        displayStore.setCartVisible(true)\r\n    }\r\n\r\n    const decline = (id) => {\r\n        displayStore.minusGoods(id)\r\n    }\r\n\r\n    const increase = (id) => {\r\n        displayStore.addGoods(id)\r\n    }\r\n\r\n    const toPay = () => {\r\n        history.push(\"/pay\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Drawer\r\n                title=\"购物车\"\r\n                placement=\"right\"\r\n                closable={false}\r\n                onClose={onClose}\r\n                visible={displayStore.cartVisible}\r\n                bodyStyle={{ display: 'flex', flexDirection: 'column' }}\r\n                mask={false}\r\n                closable\r\n            >\r\n                {displayStore.cartGoods.map(({ price, title, imgUrl, key, number }) => {\r\n                    return (\r\n                        <div className={style.cartGoods} key={key}>\r\n                            <Badge count={number}>\r\n                                <Image src={imgUrl} width={100} />\r\n                            </Badge>\r\n                            <div className={style.left}>\r\n                                <h5 className={style.title}>{title}</h5>\r\n                                <div className={style.meta}>\r\n                                    <h5>{price}元</h5>\r\n                                    <ButtonGroup>\r\n                                        <Button onClick={() => decline(key)} size={'small'}>\r\n                                            <MinusOutlined />\r\n                                        </Button>\r\n                                        <Button onClick={() => increase(key)} size={'small'}>\r\n                                            <PlusOutlined />\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n                <Button className={style.button} type=\"primary\" onClick={toPay}>结账</Button>\r\n            </Drawer>\r\n            <Button className={style.cart} onClick={open}>购物车</Button>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Cart","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\404\\Nomatch.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\display\\Goods.js",["118"],"import React, { useContext, useEffect } from 'react'\r\nimport { Space, Card, Button, Image } from 'antd'\r\nimport style from './display.module.scss'\r\nimport { RootStoreContext } from '../../store/RootStore'\r\nimport { observer } from 'mobx-react'\r\nconst { Meta } = Card;\r\n\r\nconst Goods = observer(() => {\r\n    const { displayStore } = useContext(RootStoreContext)\r\n\r\n    useEffect(() => {\r\n        displayStore.getFlowers()\r\n    }, [])\r\n\r\n    const showDrawer = (id) => {\r\n        displayStore.addGoods(id)\r\n        displayStore.setCartVisible(true)\r\n    }\r\n\r\n    return (\r\n        <div className={style.goods}>\r\n            <Space>\r\n                {displayStore.result.map(({ price, title, imgUrl, key }) => {\r\n                    return (\r\n                        <Card style={{ width: 200 }}\r\n                            cover={<Image src={imgUrl} />}\r\n                            actions={[<Button type=\"primary\" onClick={() => showDrawer(key)} >加入购物车</Button>]}\r\n                            key={key}\r\n                        >\r\n                            <Meta\r\n                                title={title}\r\n                                description={`${price} 元`}\r\n                            />\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Space>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Goods","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\Seller.js",["119","120"],"import { Menu } from 'antd'\r\nimport { Link, Route, useLocation, useRouteMatch } from 'react-router-dom'\r\nimport { Layout } from 'antd'\r\nimport { observer } from 'mobx-react';\r\nimport FlowerList from './FlowerList';\r\nimport FlowerType from './TypeList';\r\nimport OrderList from './OrderList';\r\nimport { useEffect } from 'react';\r\n\r\nconst { Content, Sider } = Layout\r\nconst { SubMenu } = Menu;\r\n\r\nconst Seller = observer(() => {\r\n    const { path, url } = useRouteMatch()\r\n    const location = useLocation()\r\n\r\n    const handleClick = () => {\r\n        console.log('here')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Layout>\r\n                <Sider width={250}>\r\n                    <Menu\r\n                        defaultSelectedKeys={['flowertype']}\r\n                        defaultOpenKeys={['flower']}\r\n                        // selectedKeys={[location.pathname]}\r\n                        // openKeys={[location.pathname.split('/').slice(0, 2).join('/')]}\r\n                        mode=\"inline\"\r\n                        style={{ height: '100%' }}\r\n                        onClick={handleClick}\r\n                    >\r\n                        <SubMenu key=\"flower\" title=\"鲜花管理\">\r\n                            <Menu.Item key=\"flowertype\">\r\n                                鲜花类别\r\n                                <Link to={`${url}/flowertype`} />\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"flowerlist\">\r\n                                鲜花列表\r\n                                <Link to={`${url}/flowerlist`} />\r\n                            </Menu.Item>\r\n                        </SubMenu>\r\n\r\n                        <SubMenu key=\"order\" title=\"订单管理\">\r\n                            <Menu.Item key=\"orderlist\">\r\n                                订单列表\r\n                                <Link to={`${url}/orderlist`} />\r\n                            </Menu.Item>\r\n                        </SubMenu>\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout>\r\n                    <Content\r\n                        style={{\r\n                            padding: 24,\r\n                            margin: 0,\r\n                            'minHeight': '100vh',\r\n                            background: 'white'\r\n                        }}\r\n                    >\r\n                        <Route path={`${path}/flowerlist`} component={FlowerList} />\r\n                        <Route path={`${path}/flowertype`} component={FlowerType} />\r\n                        <Route path={`${path}/orderlist`} component={OrderList} />\r\n                        <Route exact path={`${path}`} component={FlowerType} />\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\nexport default Seller","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\features\\auth\\AuthContext.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\features\\type\\TypeContext.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\FlowerList.js",["121","122","123"],"import { Image, Button, Table, Space, Form, Modal, Input, Cascader, InputNumber } from 'antd'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { RootStoreContext } from '../../store/RootStore'\r\nimport style from './seller.module.scss'\r\nimport FlowerUpload from './FlowerUpload'\r\n\r\nconst FlowerList = observer(() => {\r\n    const { flowerStore, typeStore } = useContext(RootStoreContext)\r\n    const [editVisible, setEditVisible] = useState(false)\r\n    const [addVisible, setAddVisible] = useState(false)\r\n    const [editForm] = Form.useForm()\r\n    const [addForm] = Form.useForm()\r\n    const [editKey, setEditKey] = useState(-1)\r\n    const [options, setOptions] = useState()\r\n\r\n    useEffect(() => {\r\n        typeStore.getFlowerTypes()\r\n        const result = typeStore.flowerTypes.map(({ key, type }) => ({\r\n            label: type,\r\n            value: key\r\n        }))\r\n        setOptions(result)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        flowerStore.getFlowers()\r\n    }, [flowerStore])\r\n\r\n    useEffect(() => {\r\n        if (!editVisible) { return }\r\n        const temp = flowerStore.getFlower(editKey)\r\n\r\n        editForm.setFieldsValue({\r\n            ...temp,\r\n            flowerType: [\r\n                temp.flowerType.id\r\n            ],\r\n            img: [\r\n                {\r\n                    status: 'done',\r\n                    url: temp.imgUrl,\r\n                    key: parseInt(temp.imgUrl.replace(/[^0-9]/ig,\"\"))\r\n                },\r\n            ]\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!addVisible && !editVisible) { return }\r\n        typeStore.getFlowerTypes()\r\n        const result = typeStore.flowerTypes.map(({ key, type }) => ({\r\n            label: type,\r\n            value: key\r\n        }))\r\n        setOptions(result)\r\n    }, [addVisible, editVisible])\r\n\r\n    const columns = [\r\n        {\r\n            title: '名称',\r\n            dataIndex: 'title',\r\n            width: \"40%\",\r\n            key: 'title'\r\n        },\r\n        {\r\n            title: '价格',\r\n            dataIndex: 'price',\r\n            width: \"20%\",\r\n            key: 'price'\r\n        },\r\n        {\r\n            title: '种类',\r\n            dataIndex: 'flowerType',\r\n            width: \"20%\",\r\n            key: 'flowerType',\r\n            render: flowerType => {\r\n                return (\r\n                    <span>{flowerType.type}</span>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: '图片',\r\n            dataIndex: 'imgUrl',\r\n            key: 'imgUrl',\r\n            width: \"20%\",\r\n            align: 'center',\r\n            render: img => <Image src={img} width={100} />\r\n        },\r\n        {\r\n            title: '操作',\r\n            key: 'action',\r\n            align: 'center',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button onClick={() => {\r\n                        setEditKey(record.key)\r\n                        setEditVisible(true)\r\n                    }} type='primary'>\r\n                        修改\r\n                    </Button>\r\n                    <Button type=\"primary\" danger onClick={() => {\r\n                        handleRemoveFlower(record.key)\r\n                    }}>\r\n                        删除\r\n                    </Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ]\r\n\r\n    const handleAddFlower = async () => {\r\n        await flowerStore.postFlower(addForm.getFieldValue('title'), addForm.getFieldValue('price'), { id: addForm.getFieldValue('flowerType')[0] }, addForm.getFieldValue('img')[0].response.id)\r\n        addForm.setFieldsValue({})\r\n        setAddVisible(false)\r\n    }\r\n\r\n    const handleRemoveFlower = async (key) => {\r\n        await flowerStore.deleteFlower(key)\r\n    }\r\n\r\n    const handleEditFlower = async () => {\r\n        await flowerStore.putFlower(editKey, editForm.getFieldValue('title'), editForm.getFieldValue('price'), editForm.getFieldValue('flowerType')[0], editForm.getFieldValue('img')[0].key)\r\n        setEditVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button type='primary' onClick={() => setAddVisible(true)}>新增鲜花</Button>\r\n            <Table columns={columns} dataSource={flowerStore.flowers} style={{ marginTop: 20 }} />\r\n\r\n            <Modal title=\"鲜花属性\" visible={editVisible} onOk={handleEditFlower} onCancel={() => setEditVisible(false)}>\r\n                <Form\r\n                    form={editForm}\r\n                >\r\n                    <Form.Item\r\n                        label=\"名称\"\r\n                        name=\"title\"\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"价格\"\r\n                        name=\"price\"\r\n                    >\r\n                        <InputNumber />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"类别\"\r\n                        name=\"flowerType\"\r\n                    >\r\n                        <Cascader options={options} placeholder=\"\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"图片\"\r\n                        name=\"img\"\r\n                    >\r\n                        <FlowerUpload />\r\n                    </Form.Item>\r\n\r\n                </Form>\r\n            </Modal>\r\n            <Modal title=\"新增鲜花\" visible={addVisible} onOk={handleAddFlower} onCancel={() => setAddVisible(false)}>\r\n                <Form\r\n                    form={addForm}\r\n                >\r\n                    <Form.Item\r\n                        label=\"名称\"\r\n                        name=\"title\"\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"价格\"\r\n                        name=\"price\"\r\n                    >\r\n                        <InputNumber />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"类别\"\r\n                        name=\"flowerType\"\r\n                    >\r\n                        <Cascader options={options} placeholder=\"\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"图片\"\r\n                        name=\"img\"\r\n                    >\r\n                        <FlowerUpload />\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default FlowerList","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\features\\display\\DisplayContext.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\features\\flower\\FlowerContext.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\login\\Login.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\pay\\Pay.js",["124"],"import { observer } from \"mobx-react\"\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Cascader, Input, Select, Table, Form, Modal, message } from 'antd';\r\nimport { RootStoreContext } from \"../../store/RootStore\";\r\nimport Text from \"antd/lib/typography/Text\";\r\nimport style from './pay.module.scss'\r\nimport QRCode from 'qrcode.react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst columns = [\r\n    {\r\n        title: 'ID',\r\n        dataIndex: 'id',\r\n        render: (text) => <span>{text}</span>,\r\n        key: 'id'\r\n    },\r\n    {\r\n        title: '商品',\r\n        dataIndex: 'title',\r\n        key: 'title'\r\n    },\r\n    {\r\n        title: '个数',\r\n\r\n        dataIndex: 'number',\r\n        key: 'number'\r\n    },\r\n    {\r\n        title: '价格',\r\n        dataIndex: 'price',\r\n        key: 'price'\r\n    }\r\n];\r\n\r\nconst residences = [\r\n    {\r\n        value: '广东省',\r\n        label: '广东省',\r\n        children: [\r\n            {\r\n                value: '广州市',\r\n                label: '广州市',\r\n                children: [\r\n                    {\r\n                        value: '天河区',\r\n                        label: '天河区',\r\n                    },\r\n                    {\r\n                        value: '越秀区',\r\n                        label: '越秀区',\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                value: '深圳市',\r\n                label: '深圳市',\r\n                children: [\r\n                    {\r\n                        value: '南山区',\r\n                        label: '南山区',\r\n                    },\r\n                    {\r\n                        value: '福田区',\r\n                        label: '福田区',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: '福建省',\r\n        label: '福建省',\r\n        children: [\r\n            {\r\n                value: '厦门市',\r\n                label: '厦门市',\r\n                children: [\r\n                    {\r\n                        value: '集美区',\r\n                        label: '集美区',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n// const data = [{ \"price\": 378, \"title\": \"浓33枝红玫瑰+梦幻黑纱\", \"img\": \"/static/media/2.e88520e9.jpg\", \"id\": 2, \"number\": 3, \"key\": 2 },\r\n// { \"price\": 268, \"title\": \"19枝苏醒玫瑰+2枝粉色桔梗\", \"img\": \"/static/media/1.bdbb4833.jpg\", \"id\": 1, \"number\": 2, \"key\": 1 }]\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 8,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst Pay = observer(() => {\r\n    const { displayStore } = useContext(RootStoreContext)\r\n    const [money, setMoney] = useState(0)\r\n    const [list, setList] = useState([])\r\n    const [visible, setVisible] = useState(false)\r\n    const [information, setInformation] = useState({})\r\n    const history = useHistory()\r\n\r\n    const tableChange = (selectedRowKeys, selectedRows) => {\r\n        setList(selectedRows.map(value => {\r\n            return {\r\n                key: value.key,\r\n                number: value.number\r\n            }\r\n        }))\r\n\r\n        setMoney(selectedRows.reduce((total, current) => {\r\n            return total + current.number * current.price\r\n        }, 0))\r\n    }\r\n\r\n\r\n    // 支付\r\n    const onFinish = values => {\r\n\r\n        if (money === 0) {\r\n            message.info(\"请选择需要支付的商品\")\r\n            return\r\n        }\r\n\r\n        setInformation(values)\r\n        setVisible(true)\r\n    }\r\n\r\n    const toOrder = () => {\r\n        history.push('/order')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (visible) {\r\n            setTimeout(() => {\r\n                setVisible(false)\r\n                displayStore.addOrder(information, list, money)\r\n            }, 3000)\r\n        }\r\n    }, [visible])\r\n\r\n    return (\r\n        <>\r\n            <div className={style.pay}>\r\n                <Table\r\n                    rowSelection={{\r\n                        onChange: tableChange,\r\n                    }}\r\n                    columns={columns}\r\n                    dataSource={displayStore.cartGoods}\r\n                    pagination={false}\r\n                    summary={() => {\r\n                        return <Table.Summary.Row>\r\n                            <Table.Summary.Cell colSpan={5}><span style={{ display: 'table', margin: '0 auto' }}><Text type=\"danger\">总金额：{money}</Text></span></Table.Summary.Cell>\r\n                        </Table.Summary.Row>\r\n                    }}\r\n                />\r\n                <Form\r\n                    {...layout}\r\n                    onFinish={onFinish}\r\n                >\r\n                    <Form.Item\r\n                        label=\"收货人\"\r\n                        name=\"receiver\"\r\n                    >\r\n                        <Input style={{ width: '65%' }} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"电话号码\"\r\n                        name=\"phone\"\r\n                    >\r\n                        <Input style={{ width: '65%' }} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"地址\"\r\n                    >\r\n                        <Input.Group compact>\r\n                            <Form.Item\r\n                                name={['address', 'region']}\r\n                                noStyle\r\n                            >\r\n                                <Cascader placeholder=\"所在地区\" options={residences} style={{ width: '25%' }} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                name={['address', 'address']}\r\n                                noStyle\r\n                            >\r\n                                <Input placeholder=\"详细地址\" style={{ width: '40%' }} />\r\n                            </Form.Item>\r\n                        </Input.Group>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"物流\"\r\n                        name=\"expressCompany\"\r\n                    >\r\n                        <Select style={{ width: 100 }} >\r\n                            <Select.Option value=\"顺丰\">顺丰</Select.Option>\r\n                            <Select.Option value=\"圆通\">圆通</Select.Option>\r\n                            <Select.Option value=\"邮政包裹\">邮政包裹</Select.Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"备注\"\r\n                        name=\"remark\"\r\n                    >\r\n                        <Input style={{ width: '65%' }} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">付款</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n            <Modal \r\n                visible={visible}\r\n                footer={null}\r\n                title=\"扫描二维码付款\"\r\n            >\r\n                <QRCode level='H' value=\"http://tstxxy.icu\" style={{display: 'block', margin: '0 auto'}}/>\r\n            </Modal>\r\n            <Button className={style.order} onClick={toOrder}>订单中心</Button>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default Pay","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\TypeList.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\home\\Home.js",["125"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Upload } from 'antd'\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport style from './home.module.scss'\r\n\r\nconst Home = () => {\r\n    const [form] = Form.useForm()\r\n\r\n    const handleClick = () => {\r\n        console.log(form.getFieldValue('uploadPhoto'))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                form={form}\r\n                initialValues={\r\n                    {\r\n                        'uploadPhoto': []\r\n                    }\r\n                }\r\n            >\r\n                <Form.Item name=\"uploadPhoto\">\r\n                    <UploadComponent />\r\n                </Form.Item>\r\n            </Form>\r\n\r\n            <Button type='primary' onClick={handleClick}> submit</Button>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst UploadComponent = ({ value, onChange }) => {\r\n    const [fileList, setFileList] = useState([])\r\n    const [previewVisible, setPreviewVisible] = useState(false);\r\n    const [previewImage, setPreviewImage] = useState('');\r\n    const uploadButton = (\r\n        <div>\r\n            <PlusOutlined />\r\n            <div>Upload</div>\r\n        </div>\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!value) { return }\r\n        let newFileList = value.map(item => ({\r\n            uid: item.id || item.uid,\r\n            status: 'done',\r\n            url: '/static/media/0.6d5e7135.jpg',\r\n            imgUrl: item.imgUrl\r\n        }))\r\n        setFileList(newFileList)\r\n    }, [value])\r\n\r\n    const triggerChange = (v) => {\r\n        if (!onChange) { return }\r\n\r\n        onChange(v)\r\n    }\r\n\r\n    const handleChange = ({ file, fileList }) => {\r\n\r\n        fileList = fileList.map((f) => {\r\n            if (f.response) {\r\n                // f.id = f.uid;\r\n                console.log(f.response)\r\n                // file.imgUrl = file.response.data.key\r\n\r\n            }\r\n            return f;\r\n        })\r\n        if (file.status !== undefined) {\r\n            if (file.status === 'done') {\r\n                console.log('上传成功')\r\n                triggerChange(fileList);\r\n            } else if (file.status === 'error') {\r\n                console.log('上传失败')\r\n            } else if (file.status === 'removed') {\r\n                if (typeof file.uid === 'number') {\r\n                    //请求接口，删除已经保存过的图片，并且成功之后triggerChange\r\n                    triggerChange(fileList);\r\n                } else {\r\n                    //只是上传到了服务器，并没有保存，直接riggerChange\r\n                    triggerChange(fileList);\r\n                }\r\n            }\r\n        }\r\n        setFileList([...fileList]);\r\n    }\r\n\r\n    const handlePreview = async (file) => {\r\n        setPreviewImage(\"/static/media/0.6d5e7135.jpg\");\r\n        setPreviewVisible(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Upload\r\n                name=\"flower\"\r\n                listType=\"picture-card\"\r\n                fileList={fileList}\r\n                onChange={handleChange}\r\n                onPreview={handlePreview}\r\n                action={'/flowerimg'}\r\n            >\r\n                {fileList.length >= 1 ? null : uploadButton}\r\n            </Upload>\r\n            <Modal\r\n                visible={previewVisible}\r\n                title='预览照片'\r\n                footer={null}\r\n                onCancel={() => setPreviewVisible(false)}\r\n            >\r\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n            </Modal>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home","C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\seller\\FlowerUpload.js",[],"C:\\Users\\yhm\\Desktop\\T\\GPMS\\src\\pages\\404\\NoMatch.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":111,"column":29,"nodeType":"132","endLine":111,"endColumn":32},{"ruleId":"126","replacedBy":"133"},{"ruleId":"128","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":2,"column":31,"nodeType":"137","messageId":"138","endLine":2,"endColumn":38},{"ruleId":"135","severity":1,"message":"139","line":2,"column":53,"nodeType":"137","messageId":"138","endLine":2,"endColumn":58},{"ruleId":"126","replacedBy":"140"},{"ruleId":"128","replacedBy":"141"},{"ruleId":"126","replacedBy":"142"},{"ruleId":"128","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":45,"column":17,"nodeType":"146","endLine":45,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":13,"column":8,"nodeType":"149","endLine":13,"endColumn":10,"suggestions":"150"},{"ruleId":"135","severity":1,"message":"151","line":8,"column":10,"nodeType":"137","messageId":"138","endLine":8,"endColumn":19},{"ruleId":"135","severity":1,"message":"152","line":15,"column":11,"nodeType":"137","messageId":"138","endLine":15,"endColumn":19},{"ruleId":"135","severity":1,"message":"153","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":13},{"ruleId":"147","severity":1,"message":"154","line":24,"column":8,"nodeType":"149","endLine":24,"endColumn":10,"suggestions":"155"},{"ruleId":"147","severity":1,"message":"154","line":57,"column":8,"nodeType":"149","endLine":57,"endColumn":33,"suggestions":"156"},{"ruleId":"147","severity":1,"message":"157","line":151,"column":8,"nodeType":"149","endLine":151,"endColumn":17,"suggestions":"158"},{"ruleId":"135","severity":1,"message":"153","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":13},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["159"],["160"],"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'Space' is defined but never used.",["159"],["160"],["159"],["160"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'displayStore'. Either include it or remove the dependency array.","ArrayExpression",["161"],"'useEffect' is defined but never used.","'location' is assigned a value but never used.","'style' is defined but never used.","React Hook useEffect has a missing dependency: 'typeStore'. Either include it or remove the dependency array.",["162"],["163"],"React Hook useEffect has missing dependencies: 'displayStore', 'information', 'list', and 'money'. Either include them or remove the dependency array.",["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [displayStore]",{"range":"173","text":"174"},"Update the dependencies array to be: [typeStore]",{"range":"175","text":"176"},"Update the dependencies array to be: [addVisible, editVisible, typeStore]",{"range":"177","text":"178"},"Update the dependencies array to be: [displayStore, information, list, money, visible]",{"range":"179","text":"180"},[429,431],"[displayStore]",[965,967],"[typeStore]",[1831,1856],"[addVisible, editVisible, typeStore]",[3764,3773],"[displayStore, information, list, money, visible]"]